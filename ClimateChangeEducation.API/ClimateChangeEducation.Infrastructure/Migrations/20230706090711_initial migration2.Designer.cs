// <auto-generated />
using System;
using ClimateChangeEducation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClimateChangeEducation.Infrastructure.Migrations
{
    [DbContext(typeof(ClimateDataContext))]
    [Migration("20230706090711_initial migration2")]
    partial class initialmigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArticleCategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.ArticleCategory", b =>
                {
                    b.Property<string>("ArticleCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ArticleCategoryId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.ContactUs", b =>
                {
                    b.Property<string>("ContactUsId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<string>("YourEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YourMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("YourName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("YourSubject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ContactUsId");

                    b.ToTable("ContactUsMessages");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CourseEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoursePhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CourseStartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.CourseEnrollment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.CourseLesson", b =>
                {
                    b.Property<string>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseModuleModuleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonArticle")
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonVideoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("LessonId");

                    b.HasIndex("CourseModuleModuleId");

                    b.ToTable("CourseLessons");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.CourseModule", b =>
                {
                    b.Property<string>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleDescription")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModules");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.DiscussionBoard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DiscussionBoards");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.DiscussionBoardComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommentedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscussionBoardPostId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionBoardPostId");

                    b.ToTable("DiscussionBoardComments");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.DiscussionBoardPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscussionBoardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionBoardId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("DiscussionBoardPost");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.NoticeBoard", b =>
                {
                    b.Property<string>("NoticeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayPhoto")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoticeContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NoticeDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("NoticeTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishStartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolId")
                        .HasColumnType("TEXT");

                    b.HasKey("NoticeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.QuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<short>("AllocatedScore")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuizQuestionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Quiz", b =>
                {
                    b.Property<string>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("QuizId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.QuizEnrollment", b =>
                {
                    b.Property<string>("EnrollmentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<short>("QuizScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("QuizStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseId");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizEnrollments");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.QuizQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.School", b =>
                {
                    b.Property<string>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccountActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolEmail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportingDocument")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAccountRole")
                        .HasColumnType("TEXT");

                    b.HasKey("SchoolId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccountActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAccountRole")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccountActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAccountRole")
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DiscussionBoardCommentSchool", b =>
                {
                    b.Property<string>("DiscussionBoardCommentsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolsSchoolId")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscussionBoardCommentsId", "SchoolsSchoolId");

                    b.HasIndex("SchoolsSchoolId");

                    b.ToTable("DiscussionBoardCommentSchool");
                });

            modelBuilder.Entity("DiscussionBoardCommentStudent", b =>
                {
                    b.Property<string>("DiscussionBoardCommentsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentsStudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscussionBoardCommentsId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("DiscussionBoardCommentStudent");
                });

            modelBuilder.Entity("DiscussionBoardCommentTeacher", b =>
                {
                    b.Property<string>("DiscussionBoardCommentsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeachersTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscussionBoardCommentsId", "TeachersTeacherId");

                    b.HasIndex("TeachersTeacherId");

                    b.ToTable("DiscussionBoardCommentTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Article", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.ArticleCategory", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Course", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.Student", null)
                        .WithMany("Course")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId");

                    b.HasOne("ClimateChangeEducation.Domain.Entities.Student", "Student")
                        .WithMany("CourseEnrollment")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.CourseLesson", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.CourseModule", "CourseModule")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseModuleModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseModule");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.CourseModule", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.Course", "Course")
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.DiscussionBoardComment", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.DiscussionBoardPost", "DiscussionBoardPost")
                        .WithMany("Comments")
                        .HasForeignKey("DiscussionBoardPostId");

                    b.Navigation("DiscussionBoardPost");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.DiscussionBoardPost", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.DiscussionBoard", "DiscussionBoard")
                        .WithMany("Posts")
                        .HasForeignKey("DiscussionBoardId");

                    b.HasOne("ClimateChangeEducation.Domain.Entities.School", "School")
                        .WithMany("DiscussionBoardPosts")
                        .HasForeignKey("SchoolId");

                    b.HasOne("ClimateChangeEducation.Domain.Entities.Teacher", "Teacher")
                        .WithMany("DiscussionBoardPosts")
                        .HasForeignKey("TeacherId");

                    b.Navigation("DiscussionBoard");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.NoticeBoard", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.QuizQuestion", "QuizQuestion")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuizQuestionId");

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Quiz", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.Course", "Course")
                        .WithOne("Quiz")
                        .HasForeignKey("ClimateChangeEducation.Domain.Entities.Quiz", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.QuizEnrollment", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateChangeEducation.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizEnrollment")
                        .HasForeignKey("QuizId");

                    b.HasOne("ClimateChangeEducation.Domain.Entities.Student", "Student")
                        .WithMany("QuizEnrollment")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.QuizQuestion", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.School", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("School")
                        .HasForeignKey("ClimateChangeEducation.Domain.Entities.School", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Student", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("ClimateChangeEducation.Domain.Entities.Student", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateChangeEducation.Domain.Entities.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Teacher")
                        .HasForeignKey("ClimateChangeEducation.Domain.Entities.Teacher", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateChangeEducation.Domain.Entities.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("School");
                });

            modelBuilder.Entity("DiscussionBoardCommentSchool", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.DiscussionBoardComment", null)
                        .WithMany()
                        .HasForeignKey("DiscussionBoardCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateChangeEducation.Domain.Entities.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionBoardCommentStudent", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.DiscussionBoardComment", null)
                        .WithMany()
                        .HasForeignKey("DiscussionBoardCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateChangeEducation.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionBoardCommentTeacher", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.DiscussionBoardComment", null)
                        .WithMany()
                        .HasForeignKey("DiscussionBoardCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateChangeEducation.Domain.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimateChangeEducation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClimateChangeEducation.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("School");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.ArticleCategory", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseModules");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.CourseModule", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.DiscussionBoard", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.DiscussionBoardPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("QuizEnrollment");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.QuizQuestion", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.School", b =>
                {
                    b.Navigation("DiscussionBoardPosts");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Student", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("CourseEnrollment");

                    b.Navigation("QuizEnrollment");
                });

            modelBuilder.Entity("ClimateChangeEducation.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("DiscussionBoardPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
